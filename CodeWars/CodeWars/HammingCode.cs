using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CodeWars
{
    /// <see cref="https://www.codewars.com/kata/5ef9ca8b76be6d001d5e1c3e/train/csharp"/>
    [TestClass]
    public class HammingCode
    {
        [TestMethod]
        public void Test()
        {
            Assert.AreEqual("000111111000111000000000000111111000000111000111000111111111111000000111", Encode("hey"));
            Assert.AreEqualncode("The Sensei told me that i can do this kata"));
            Assert.AreEqual("000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000", Encode("T3st"));
            Assert.AreEqual("000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111", Encode("T?st!%"));
            Assert.AreEqual("hey", Decode("100111111000111001000010000111111000000111001111000111110110111000010111"));
            Assert.AreEqual("The Sensei told me that i can do this kata", Decode
            Assert.AreEqual("T3st", Decode("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"));
            Assert.AreEqual("T?st!%", Decode("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"));
        }

        public static string Encode(string text)
        {
            byte[] asciiBytes = Encoding.ASCII.GetBytes(text);
            string[] binaries = asciiBytes.Select(x => Convert.ToString(x, 2).PadLeft(8, '0')).ToArray();

            var result = new StringBuilder();

            foreach (var binary in binaries)
            {
                foreach (var item in binary)
                {
                    result.Append(item);
                    result.Append(item);
                    result.Append(item);
                }
            }

            return result.ToString();
        }

        public static string Decode(string bits)
        {
            string[] bitGroups = SplitIntoGroups(bits, 3);
            var corrected = bitGroups.Select(d => d.Count(bit => bit == '0') > 1 ? 0 : 1);
            var join = string.Join("", corrected);
            string[] bytes = SplitIntoGroups(join, 8);
            string result = "";

            foreach (var bite in bytes)
            {
                var ascii = Convert.ToInt32(bite, 2);
                char ch = (char)ascii;
                result += ch;
            }

            return result;
        }

        private static string[] SplitIntoGroups(string str, int num)
        {
            var bytes = new List<string>();

            for (int i = 0; i < str.Length / num; i++)
            {
                var triple = str.Substring(i * num, num);

                bytes.Add(triple);
            }

            return bytes.ToArray();
        }
    }
}
